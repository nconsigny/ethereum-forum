/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /topics
         * @description List topics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Topic"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/t/{topic_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /t/:topic_id
         * @description Get a topic
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    topic_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["Topic"];
                    };
                };
            };
        };
        put?: never;
        /**
         * /t/:topic_id
         * @description Force refresh a topic
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    topic_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/t/{topic_id}/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /t/:topic_id/posts?page={page}
         * @description Get all data for a topic
         */
        get: {
            parameters: {
                query: {
                    page: number;
                };
                header?: never;
                path: {
                    topic_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["PostsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /users
         * @description List users
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * /events
         * @description List events
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json; charset=utf-8": components["schemas"]["CalendarEvent"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CalendarEvent */
        CalendarEvent: {
            summary?: string;
            description?: string;
            uid?: string;
            /** Format: date-time */
            last_modified?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            start?: string;
            occurance: components["schemas"]["EventOccurrence"];
            meeting?: components["schemas"]["Meeting"];
        };
        /** @enum {string} */
        EventOccurrence: "Single" | "Recurring";
        Meeting: components["schemas"]["Meeting_ZoomMeetingData"];
        Meeting_ZoomMeetingData: {
            /**
             * @example Zoom
             * @enum {string}
             */
            type: "Zoom";
        } & components["schemas"]["ZoomMeetingData"];
        /** Post */
        Post: {
            /** Format: int32 */
            post_id: number;
            /** Format: int32 */
            topic_id: number;
            /** Format: int32 */
            user_id: number;
            /** Format: int32 */
            post_number: number;
            /** Format: date-time */
            updated_at?: string;
            /** Format: date-time */
            created_at?: string;
            cooked?: string;
            post_url?: string;
            extra?: unknown;
        };
        /** PostsResponse */
        PostsResponse: {
            posts: components["schemas"]["Post"][];
            has_more: boolean;
        };
        /** Topic */
        Topic: {
            /** Format: int32 */
            topic_id: number;
            title: string;
            slug: string;
            /** Format: int32 */
            post_count: number;
            /** Format: int32 */
            view_count: number;
            /** Format: int32 */
            like_count: number;
            image_url?: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            last_post_at?: string;
            /** Format: date-time */
            bumped_at?: string;
            extra?: unknown;
        };
        /** ZoomMeetingData */
        ZoomMeetingData: {
            link: string;
            meeting_id?: string;
            passcode?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
